//
// Copyright 2022 Adobe. All rights reserved.
// This file is licensed to you under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License. You may obtain a copy
// of the License at http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under
// the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
// OF ANY KIND, either express or implied. See the License for the specific language
// governing permissions and limitations under the License.
//

import AEPServices
import Foundation

/// Provides utility functions to generate the URL variables string
enum URLUtils {

    /// Helper function to generate url variables in format acceptable by the AEP web SDKs
    /// - Parameters:
    ///   - ts: timestamp string denoting time when url variables request was made
    ///   - ecid: Experience Cloud identifier string generated by the SDK
    ///   - orgId: Experience Cloud Org identifier string set in the configuration
    /// - Returns: a string formatted with the visitor id payload
    static func generateURLVariablesPayload(timestamp: String, ecid: String, orgId: String) -> String {
        // append timestamp
        var theIdString = appendParameterToUrlVariablesString(original: "", key: IdentityConstants.URLKeys.TIMESTAMP, value: timestamp)

        // append ecid
        theIdString = appendParameterToUrlVariablesString(original: theIdString, key: IdentityConstants.URLKeys.EXPERIENCE_CLOUD_ID, value: ecid)

        // append org id
        theIdString = appendParameterToUrlVariablesString(original: theIdString, key: IdentityConstants.URLKeys.EXPERIENCE_CLOUD_ORG_ID, value: orgId)

        // encode adobe_mc string and append to the url
        let urlFragment = "\(IdentityConstants.URLKeys.PAYLOAD)=\(URLEncoder.encode(value: theIdString))"

        return urlFragment
    }

    /// Appends the parameter to the original string
    /// - Parameters:
    ///   - original: the base url to have the parameter appended to
    ///   - key: key to be appended to the url, expected to be non-empty
    ///   - value: value to be appended to the url, expected to be non-empty
    /// - Returns: `original` with `key` and `value` properly appended
    private static func appendParameterToUrlVariablesString(original: String, key: String, value: String) -> String {
        if key.isEmpty || value.isEmpty {
            return original
        }

        let newUrlVar = "\(key)=\(value)"
        if original.isEmpty {
            return newUrlVar
        }

        return "\(original)|\(newUrlVar)"
    }

}
